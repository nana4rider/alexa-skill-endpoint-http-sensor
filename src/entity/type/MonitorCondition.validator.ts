/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import MonitorCondition from './MonitorCondition';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {MonitorCondition};
export const MonitorConditionSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "anyOf": [
    {
      "$ref": "#/definitions/MonitorConditionRefining"
    },
    {
      "$ref": "#/definitions/MonitorConditionPrice"
    },
    {
      "$ref": "#/definitions/MonitorConditionSlot"
    },
    {
      "$ref": "#/definitions/MonitorConditionNoneSlot"
    },
    {
      "$ref": "#/definitions/MonitorConditionOption"
    },
    {
      "$ref": "#/definitions/MonitorConditionNoneOption"
    }
  ],
  "definitions": {
    "MonitorConditionNoneOption": {
      "defaultProperties": [
      ],
      "properties": {
        "operator": {
          "enum": [
            "none"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "option"
          ],
          "type": "string"
        }
      },
      "required": [
        "operator",
        "type"
      ],
      "type": "object"
    },
    "MonitorConditionNoneSlot": {
      "defaultProperties": [
      ],
      "properties": {
        "operator": {
          "enum": [
            "none"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "slot"
          ],
          "type": "string"
        }
      },
      "required": [
        "operator",
        "type"
      ],
      "type": "object"
    },
    "MonitorConditionOption": {
      "defaultProperties": [
      ],
      "properties": {
        "operator": {
          "enum": [
            "<=",
            "=",
            ">="
          ],
          "type": "string"
        },
        "optionId": {
          "type": "number"
        },
        "type": {
          "enum": [
            "option"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "operator",
        "optionId",
        "type",
        "value"
      ],
      "type": "object"
    },
    "MonitorConditionPrice": {
      "defaultProperties": [
      ],
      "properties": {
        "operator": {
          "enum": [
            "<=",
            ">="
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "price"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "operator",
        "type",
        "value"
      ],
      "type": "object"
    },
    "MonitorConditionRefining": {
      "defaultProperties": [
      ],
      "properties": {
        "operator": {
          "enum": [
            "<=",
            "=",
            ">="
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "refining"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "operator",
        "type",
        "value"
      ],
      "type": "object"
    },
    "MonitorConditionSlot": {
      "defaultProperties": [
      ],
      "properties": {
        "itemId": {
          "type": "number"
        },
        "operator": {
          "enum": [
            "<=",
            "=",
            ">="
          ],
          "type": "string"
        },
        "quantity": {
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "number"
        },
        "type": {
          "enum": [
            "slot"
          ],
          "type": "string"
        }
      },
      "required": [
        "itemId",
        "operator",
        "quantity",
        "type"
      ],
      "type": "object"
    }
  }
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isMonitorCondition = ajv.compile(MonitorConditionSchema) as ValidateFunction<MonitorCondition>;
export default function validate(value: unknown): MonitorCondition {
  if (isMonitorCondition(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isMonitorCondition.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'MonitorCondition'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
